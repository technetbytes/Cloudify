AWSTemplateFormatVersion: '2010-09-09'
Description: Serverless Fanout using Amazon SNS and Amazon Lambda
Parameters:
  S3BucketName:
    Type: String
  SnsTopicName:
    Type: String

Resources:
  MediaInfoFunctionInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref MediaInfoFunction
      Principal: sns.amazonaws.com

  MediaInfoFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: MediaInfo processing
      Handler: index.lambda_handler
      Runtime: python2.7
      Role: !GetAtt AWSLambdaBasicExecutionRole.Arn
      FunctionName: media_info
      Code:
        ZipFile: |
          import json
          import logging
          import boto3

          logger = logging.getLogger('boto3')
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              s3_event = parse_event(event)
              logger.info(json.dumps(s3_event))

              # MediaInfo Processing
              # see: https://aws.amazon.com/blogs/compute/extracting-video-metadata-using-lambda-and-mediainfo/

              return 'done'

          def parse_event(event):
              record = event['Records'][0]
              if 'EventSource' in record and record['EventSource'] == 'aws:sns':
                  return json.loads(record['Sns']['Message'])

              return event


  TranscodeAudioFunctionInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref TranscodeAudioFunction
      Principal: sns.amazonaws.com

  TranscodeAudioFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: Audio transcode processing
      Handler: index.lambda_handler
      Runtime: python2.7
      Role: !GetAtt AWSLambdaBasicExecutionRole.Arn
      FunctionName: transcode_audio
      Code:
        ZipFile: |
          import json
          import logging
          import boto3

          logger = logging.getLogger('boto3')
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              s3_event = parse_event(event)
              logger.info(json.dumps(s3_event))

              # ffmpeg copy audio only: ffmpeg -i input.mp4 -c:v copy -c:a libfdk_aac -vbr 3 output.mp4
              # see: https://trac.ffmpeg.org/wiki/Encode/AAC

              return 'done'

          def parse_event(event):
              record = event['Records'][0]
              if 'EventSource' in record and record['EventSource'] == 'aws:sns':
                  return json.loads(record['Sns']['Message'])

              return event


  FanoutFunctionsInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FanoutFunction
      Principal: s3.amazonaws.com

  FanoutFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: Fanout function
      Handler: index.lambda_handler
      Runtime: python2.7
      Role: !GetAtt AWSLambdaBasicExecutionRole.Arn
      FunctionName: fanout
      Code:
        ZipFile: |
          import json
          import logging
          import boto3

          logger = logging.getLogger('boto3')
          logger.setLevel(logging.INFO)

          client = boto3.client('lambda')
          fanout_functions = ['media_info', 'transcode_audio']

          def lambda_handler(event, context):
              logger.info(json.dumps(event))
              logger.info('fanout_functions: %s', fanout_functions)

              for fanout_function in fanout_functions:
                  logger.info('invoke: %s', fanout_function)
                  response = client.invoke(
                      FunctionName=fanout_function,
                      InvocationType='Event',
                      Payload=json.dumps(event)
                  )
                  logger.info('response: %s', response)

              return 'done'


  AWSLambdaBasicExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: lambdaInvokeFunction
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Resource: '*'
                Action: 'lambda:InvokeFunction'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 'sts:AssumeRole'
            Principal:
              Service: lambda.amazonaws.com

  SnsTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName: !Ref SnsTopicName
      Subscription:
        - Protocol: lambda
          Endpoint: !GetAtt MediaInfoFunction.Arn
        - Protocol: lambda
          Endpoint: !GetAtt TranscodeAudioFunction.Arn

  SNSTopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      Topics:
        - !Ref SnsTopic
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 'sns:Publish'
            Resource: !Ref SnsTopic
            Condition:
              ArnLike:
                aws:SourceArn: !Sub "arn:aws:s3:::${S3BucketName}"
            Principal:
              AWS: '*'

  S3Bucket:
    Type: 'AWS::S3::Bucket'
    DependsOn: SnsTopic
    Properties:
      BucketName: !Ref S3BucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Function: !GetAtt FanoutFunction.Arn
            Event: 's3:ObjectCreated:*'
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: 'uploads/lambda/'
        TopicConfigurations:
          - Topic: !Ref SnsTopic
            Event: 's3:ObjectCreated:*'
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: 'uploads/sns/'

Outputs:
  S3Bucket:
    Value: !Ref S3Bucket
  SnsTopic:
    Value: !Ref SnsTopic
